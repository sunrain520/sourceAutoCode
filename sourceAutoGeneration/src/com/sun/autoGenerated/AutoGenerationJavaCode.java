package com.sun.autoGenerated;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sun.until.StringUtil;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;

/**
 * 
 * @author
 * @version v1.0
 * @since
 */
public class AutoGenerationJavaCode {

	private String url;
	private String name;
	private String passWord;
	private String driver;
	private String sql;
	private String tableName;
	private String templateDir;
	private String autoGeneratedFile;
	private static String[][] fileNameArray = new String[7][2];

	static {
		// entity
		fileNameArray[0][0] = "entityTemplate.ftl";
		fileNameArray[0][1] = ".java";

		// service
		fileNameArray[1][0] = "serviceTemplate.ftl";
		fileNameArray[1][1] = "Service.java";

		// serviceImpl
		fileNameArray[2][0] = "serviceImplTemplate.ftl";
		fileNameArray[2][1] = "ServiceImpl.java";

		// dao
		fileNameArray[3][0] = "daoTemplate.ftl";
		fileNameArray[3][1] = "Dao.java";

		// daoImpl
		fileNameArray[4][0] = "daoImplTemplate.ftl";
		fileNameArray[4][1] = "DaoImpl.java";

		// controller
		fileNameArray[5][0] = "controllerTemplate.ftl";
		fileNameArray[5][1] = "Controller.java";

		// controller
		fileNameArray[6][0] = "mapperXmlTemplate.ftl";
		fileNameArray[6][1] = "DaoMapping.xml";
	}

	public AutoGenerationJavaCode(String url, String name, String passWord, String driver, String tableName,
			String autoGeneratedFile, String templateDir) {
		this.url = url;
		this.name = name;
		this.passWord = passWord;
		this.driver = driver;
		this.sql = "select * from " + tableName;
		this.tableName = tableName;
		this.templateDir = templateDir;
		this.autoGeneratedFile = autoGeneratedFile;
	}

	public void autoGenerationJavaCode() throws IOException, TemplateException, ClassNotFoundException, SQLException {
		Configuration cfg = new Configuration();
		cfg.setDefaultEncoding("utf-8");

		// 第一个字母转换成大写
		String className = StringUtil.delfirstCharacterToUpper(tableName);
		// 替换字符串并让它的下一个字母为大写
		String fileName = StringUtil.replaceUnderlineAndfirstToUpper(className, "_", "");
		className = fileName;

		Map<String, Object> rootMap = new HashMap<String, Object>();
		// 获取数据库字段名称 数据类型 备注说明
		List<Map<String, Object>> columnList = getColumn();
		rootMap.put("className", className);
		rootMap.put("columnMap", columnList);
		rootMap.put("user", System.getProperty("user.name"));
		rootMap.put("tableName", tableName);

		// 设置模板文件路径
		cfg.setDirectoryForTemplateLoading(new File(templateDir));
		String filePath = autoGeneratedFile + "\\" + className + "\\";
		File dir = new File(filePath);
		// 检查目录是否存在，不存在则创建
		if (!dir.exists()) {
			dir.mkdir();
		}
		for (int i = 0; i < fileNameArray.length; i++) {

			Template temp = cfg.getTemplate(fileNameArray[i][0]);

			File docFile = new File(filePath + StringUtil.firstCharacterToUpper(fileName) + fileNameArray[i][1]);

			Writer docout = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(docFile)));
			// 输出文件
			temp.process(rootMap, docout);

			System.out.println(docFile);
		}
		System.out.println("文件路径：" + autoGeneratedFile);
		System.out.println("==============文件生产成功===============");

	}

	// 获取数据库表字段名放入map中
	public List<Map<String, Object>> getColumn() throws ClassNotFoundException, SQLException {
		Connection conn;
		PreparedStatement pStemt = null;
		Class.forName(driver);
		conn = DriverManager.getConnection(url, name, passWord);
		System.out.println(sql);
		pStemt = conn.prepareStatement(sql);
		ResultSetMetaData rsmd = pStemt.getMetaData();

		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		// 获取字段注释
		List<String> commentsList = getColumnCommentByTableName();
		int size = rsmd.getColumnCount();
		for (int i = 1; i <= size; i++) {
			Map<String, Object> columnMap = new HashMap<String, Object>();
			// 数据库字段名称
			// System.out.println(rsmd.getColumnTypeName(i));
			String columnName = dealColumnName(rsmd, i);
			// 数据库字段类型
			String type = rsmd.getColumnTypeName(i);
			columnMap.put("old_type", type);
			switch (type) {
			case "INT":
				type = "Integer";
				break;
			case "TINYINT":
				type = "Integer";
				break;
			case "VARCHAR":
				type = "String";
				break;
			case "CHAR":
				type = "String";
				break;
			case "DECIMAL":
				type = "BigDecimal";
				break;
			case "BIGINT":
				type = "BigInteger";
				break;
			case "TIMESTAMP":
				type = "Date";
				break;
			default:
				type = "String";
				break;
			}

			String remark = rsmd.getColumnName(i);

			// 获取字段注释：
			columnMap.put("comment", commentsList.get(i - 1));
			columnMap.put("type", type);
			columnMap.put("remark", remark);
			columnMap.put("columnName", columnName);

			list.add(columnMap);
		}
		conn.close();
		return list;
	}

	/**
	 * 获得某表中所有字段的注释
	 * 
	 * @param tableName
	 * @return
	 * @throws Exception
	 */
	public List<String> getColumnCommentByTableName() {
		List<String> list = new ArrayList<String>();
		Connection conn;
		try {
			conn = DriverManager.getConnection(url, name, passWord);

			java.sql.Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("show full columns from " + tableName);
			while (rs.next()) {
				list.add(rs.getString("Comment"));
			}
			rs.close();
			stmt.close();
			conn.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return list;
	}

	// 将表名转换为DMO的字段名，比如 operate_type 转换后为 operateType
	private String dealColumnName(ResultSetMetaData rsmd, int i) throws SQLException {
		String columnName = rsmd.getColumnName(i).toLowerCase();

		// 替换字符串并让它的下一个字母为大写
		columnName = StringUtil.replaceUnderlineAndfirstToUpper(columnName, "_", "");

		return columnName;
	}

}
